[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thinking about how to program",
    "section": "",
    "text": "Wisdom\n\n\n\n\nThis is not going to go the way you think.\n\nLuke Skywalker\n\n\nProgramming is the task of creating instructions so that a computer can perform a task for you.\nAt the highest level programming has two steps: design a solution to a problem, then encode the solution so a computer can do the work. The first part is a challenge for creative logic, the second a challenge for language. Programming a computer takes more of our imagination and creativity than it does of our cold, hard logic or mathematics.\nThis guide is intended to help a beginner reach an understanding of how to design a solution to a problem in such a way that it can later be translated into a programming language. No coding in a programming language is demonstrated in this guide, instead the guide focuses on the building blocks of solutions for programming: sequences, loops, events, conditions, and on the key computational thinking practices: experimentation and iteration, testing, re-use and abstraction. In this guide we use a graphical tool called Scratch to create and apply these concepts in a computer.\nThe guide aims to teach an understanding of the way that programs are built, before we understand how programs are encoded in a language.\nBe prepared, this is not a typical programming course. It will be a largely self led exploration of concepts and ideas, not a slog through syntax and rote copying. If you’ve seen a programming guide before, forget it. Here your best tools will be your imagination, a notebook, a friend and your powers of reflection and criticism. This guide will be your research partner in the exploration helping you to reveal the fundamental concepts of programming.\nFor this course you will need.\n\nA computer with an internet connection\nA notebook\nA friend (actually this is optional, but will be helpful)."
  },
  {
    "objectID": "01-Reflection.html",
    "href": "01-Reflection.html",
    "title": "1  Reflection",
    "section": "",
    "text": "The extent to which programming is a slow, difficult and often collaborative effort isn’t widely appreciated. Stereotypes of ‘hackers’ in media abound - and this stereotype suggests that building a program comes from heroic spurts of inspiration and esoteric knowledge. More realistically, building a program is a slow process that involves thinking about a problem, weighing up different potential solutions and expressing them. Reflecting on problems and potential solutions and criticising them (in the strict neutral sense of evaluating and assessing dispassionately) are really important tools for advancing the solution to a problem and its implementation in a program.\nThe aim of this section is to encourage practice in these skills.\nAs so much of this guide will involve reflection and criticism, having someone you feel comfortable discussing stuff with will be helpful. It’s not absolutely necessary, though. You can do all of this guide by yourself if you’d prefer."
  },
  {
    "objectID": "01-Reflection.html#scratch---our-creativity-tool",
    "href": "01-Reflection.html#scratch---our-creativity-tool",
    "title": "1  Reflection",
    "section": "1.2 Scratch - our creativity tool",
    "text": "1.2 Scratch - our creativity tool\nScratch is a free graphical computer program for creating media projects. It is available at the MIT Scratch website\nWith it you can create a wide variety of interactive projects - animations, games etc. Hundreds of thousands of people use Scratch across the world, including primary school children and Harvard computer science undergraduates learning to program. It’s designed to be accessible yet complete. It encompasses all the key concepts we’ll need to understand programming. Take a look at this introductory video.\nLet’s investigate Scratch!\n\n\n\n\n\n\nFor you to do\n\n\n\nThese tasks may seem trivial, hopefully they will seem playful. Have some fun with them.\n\nSign-up for Scratch https://scratch.mit.edu/\nBrowse some starter projects at https://scratch.mit.edu/starter_projects/ online\nIn your notebook, sketch ideas for three different Scratch projects you would like to create.\nGo to Scratch and make the Scratch cat do something surprising\n\n\n\n\n\n\n\n\n\n!\n\n\n\nWait, what?\n\n\nYep, item number four does say to go and do something in Scratch.\n\n\n\n\n\n\n!?\n\n\n\nBut you haven’t shown us how to use it? Are we supposed to just go and do it? What are we learning here?\n\n\nGlad you asked! The object here would be for you to identify the stomach churning desperation that comes from not knowing how to solve something, yet being committed to doing so. And with that burning in your gut you manage not to be paralysed by the darkness of ignorance and still manage to claw your way into the light.\nA lot of the time with programming you’re not going to know exactly what to do at the outset. This task reaches out to your inquisitiveness and curious spirit. Just give it a go - you can’t break anything or go wrong.\nLook at this way, if you’re sitting there thinking you don’t know how to do it, anything you do will be a surprise!\nYou can do this, I believe in you.\nHere’s a starter sheet if you would like a little hint.\n\n\n\n\n\n\nFor you to do\n\n\n\nWhen you’ve built something surprising, reflect on Scratch, perhaps using the points below, jot your responses in your notebook and/or with your friend(s).\n\nWhat did you figure out?\nWhat do you want to know more about?\n\n\n\n\n1.2.1 Sharing Scratch Projects with Studios\nScratch Studios are a feature of the Scratch website, basically a sort of gallery to which you can post your creations. Let’s use them!\n\n\n\n\n\n\nFor you to do\n\n\n\n\nFind the Scratch Surprise Studio on the website http://scratch.mit.edu/studios/460431. Add your Scratch creation.\n\nHere’s a studio sheet for some hints."
  },
  {
    "objectID": "01-Reflection.html#criticising-projects",
    "href": "01-Reflection.html#criticising-projects",
    "title": "1  Reflection",
    "section": "1.3 Criticising projects",
    "text": "1.3 Criticising projects\nAs you develop programming skills, being able to criticise and find strengths and weaknesses in your and other projects will help you build stronger, better projects.\nLet’s think now about criticising each others projects. If you are working with a friend (or group of friends) make sure you can find your projects in the Scratch Surprise Studio.\n\n1.3.1 What is appropriate criticism?\nThis is a tricky subject, anything about the project could be criticised legitamately. But much of people’s difficulty with giving and receiving criticism stems from the fact different people take criticism differently. But some rules of thumb can help you come up with constructive comments.\n\nKeep things about the project, not the person!\nBe convinced that there is a need for the point you wish to make - be sure that you believe it really will help\nFind and say a positive before you deliver a negative\nDon’t say something because you haven’t said something for a while.\n\n\n\n1.3.2 Delivering (and receiving) criticism well\nSome people are totally upset by the slightest perceived negative. These people are awesome to have on a team, they are very valuable as constant re-evaluators: iteration of a project can go much quicker when they’re involved. At the other end of the scale some people are impervious to criticism and will take anything you can say and remain upbeat. These people are great at maintaining a positive direction in a team and help stop it from getting mired in details. But such diversity makes it difficult to pitch a point! As you’ll have worked out, when delivering a point you need to try to be sensitive about people’s views - just because you have a valid point you don’t have a right to be rude or insensitive, you still have a responsibility to help maintain the civility of the conversation.\nIf you know you’re the sort of person whom criticism affects strongly, try to accept other people’s points with the presumption of good faith from the other side.\nIf you’re the sort of person that criticism just bounces off, try to invest some time in thinking specifically about what you’ve received, try other people’s ideas on for size.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nFill in the table below for each Surprise Scratch project by each person in your critique group of friends.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFeedback by\nWhat is something that doesn’t work or could be improved?\nWhat is something that is confusing or could be done differently?\nWhat is something that works well or you really like about the project?\n\n\n\n\n??\n??\n??\n??\n\n\n??\n??\n??\n??\n\n\n\n\n\nIt may be helpful to think about:\n\nClarity: Did you understand what the project is supposed to do?\nFeatures: What features does the project have? Does the project work as expected?\nAppeal: How engaging is the project? Is it interactive, original, sophisticated, funny, or interesting? How did you feel as you interacted with it?\n\n\n\n1.3.3 An important note on groups of friends\nWhen you choose a group of friends for this work, its going to be best if you can find someone with whom you can exchange ideas frankly. In an academic setting, probably not everyone you could work with will work well as a partner in a critique group. A lot of this will depend on different expectations of roles in people from different social and ethnic backgrounds. Try to work with someone at a similar professional level, it can be hard to tell someone in a more senior role that they’re wrong , and what they say can be taken as ‘the right answer’ - when all contributions are valuable. Be aware too of the influence of a person’s background on how they’d express a personal opinion. If you’re from a place where it feels more natural to go along with the flow, try to find someone you’d be comfortable to express your ideas with. Experiment with sharing views over written media, rather than face to face."
  },
  {
    "objectID": "01-Reflection.html#in-this-section-we",
    "href": "01-Reflection.html#in-this-section-we",
    "title": "1  Reflection",
    "section": "1.4 In this section we…",
    "text": "1.4 In this section we…\n\n\n\n\n\n\nRoundup\n\n\n\nIn this section we have endeavoured to practice the reflection skill so necessary for evaluating your designs and creations in software. The iterative development process relies on incremental improvements. Being able to give and receive new ideas (often from yourself) will help massively."
  },
  {
    "objectID": "02-Sequence.html",
    "href": "02-Sequence.html",
    "title": "2  Sequence",
    "section": "",
    "text": "Wisdom\n\n\n\n\nA,B,C. It’s easy as 1,2,3. As simple as do-re-mi.\n\nThe Jackson 5\nA computer program is a sequence of instructions for a computer to execute. Identifying the proper sequence of events is a vital skill. That’s the main aim of this section - breaking things down into sequences. The secondary aim will be to practice iteration, by experimenting with sequences of things we’ll initially get things wrong, but by iterating each time we will get closer to a good solution."
  },
  {
    "objectID": "02-Sequence.html#examining-and-building-a-sequence-of-instructions",
    "href": "02-Sequence.html#examining-and-building-a-sequence-of-instructions",
    "title": "2  Sequence",
    "section": "2.1 Examining and building a sequence of instructions",
    "text": "2.1 Examining and building a sequence of instructions\nLet’s get straight to it and break down a sequence.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nIn pairs work out who doesn’t mind being bossed and who doesn’t mind being bossy 1\nBossed partner: Close your eyes! (or at least look away from the screen)\nBossy partner: Watch one of the videos 2\n\nhttp://vimeo.com/28612347\nhttp://vimeo.com/28612585\nhttp://vimeo.com/28612800\nhttp://vimeo.com/28612970\n\nBossy partner: describe (using spoken words only) how to perform the sequence of moves in the video. Bossed partner: Do only what the bossy partner tells you, are there any points where you need them to be clearer? If they aren’t making sense - say so.\nWrite down the steps as you go. Work from the steps.\nIn your design journal:\n\nReflect on what was easy/difficult about being bossy\nReflect on what was easy/difficult about being bossed\nWhat was difficult about watching?\n\n\n\n\nThe process above may have revealed a few points. The most apparent is that in order to be understood it is vital to be explicit about the action. Another is that the receiver of instruction (here the bossed partner) is not (often) able to ‘just do what you meant’ and get it right. The whole process probably took a few goes at least while you worked it out, so iteration is important. The list of instructions you created was a prototype program for a dance! This form of program, not real code - but a good description of the important parts is called pseudocode. The first draft of a real program will often be pseudocode."
  },
  {
    "objectID": "02-Sequence.html#building-a-sequence-with-constraints",
    "href": "02-Sequence.html#building-a-sequence-with-constraints",
    "title": "2  Sequence",
    "section": "2.2 Building a sequence with constraints",
    "text": "2.2 Building a sequence with constraints\nComputer languages don’t have a command for each possible action. They instead have very restricted sets of key commands that must be chained and used creatively to make larger effects. The commands they do have are often quite limited and do very specific tasks.\nThis is a deliberate design feature. Flexibility and power comes from these small units, chained together in novel sequences.\nIn this section we’ll examine using small units in different sequences.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nStart a new Scratch project\nUsing only the below ten blocks, make something that interests you\n\ngo to\nglide\nsay\nshow\nhide\nset size\nplay sound\nwait\nwhen this sprite clicked\nrepeat\n\nShare your creation in the 10 Blocks Studio http://scratch.mit.edu/studios/475480\nIn your critique groups or your design journal, discuss the following:\n\nWhat was difficult about being able to use 10 blocks?\nWhat was easy about only being able to use 10 blocks?\nHow did the constraint make you think of things differently?"
  },
  {
    "objectID": "02-Sequence.html#fixing-some-bugs",
    "href": "02-Sequence.html#fixing-some-bugs",
    "title": "2  Sequence",
    "section": "2.3 Fixing some bugs",
    "text": "2.3 Fixing some bugs\nLet’s examine some broken sequences and try to fix them. In this section the aim will be to explore the central sequence, and practice iterative testing and de-bugging. This is your first opportunity to try out the major parts of the development cycle.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nDo the five debugging challenges described on this debugging sheet\nDiscuss your testing and debugging practices with a partner. Make note of the similarities and differences in your strategies.\n\n\n\n\n\n\n\n\n\nRoundup\n\n\n\nIn this section we’ve looked at the importance of sequence. Breaking a problem down in to small parts is a key step to solving it. Programs are built from a sequence of small units executed in a particular order. Applying and replying combinations of commands, testing them and repeating until the combination works is the main development loop of programming."
  },
  {
    "objectID": "03-Loops.html",
    "href": "03-Loops.html",
    "title": "3  Loops and Conditionals",
    "section": "",
    "text": "Wisdom\n\n\n\n\nWith just one polka dot, nothing can be achieved.\n\nYayoi Kusama\nIn this section we will get to grips with a key control feature of programming - looping. Looping at its simplest is just doing things over and over again until you have some reason to stop. Loops are a way of making the computer really work for you.\nA loop is a code construct that contains code. Think of it as a box of code that gets run over and over. In Scratch the graphical metaphor is very simple, you have a block with a mouth, inside that mouth is the loop code, everything in the mouth gets repeated for as long as the loop definition says to. The loop definition is the the bit of writing at the top of the mouth.\nThese things make a lot more sense when you see them in use. Let’s examine some loops by building some that make music!\nSo that’s the basic idea, loops do stuff over and over. They can do set numbers of repeats, keep going forever or keep going until something else happens."
  },
  {
    "objectID": "03-Loops.html#fixing-some-bugs",
    "href": "03-Loops.html#fixing-some-bugs",
    "title": "3  Loops and Conditionals",
    "section": "3.1 Fixing some bugs",
    "text": "3.1 Fixing some bugs\nLet’s have a look at some code with loops, some of which needs fixing.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nDo the loop debugging worksheet\nIn your critique groups or your design journal:\n\nDiscuss the importance of the counter in the loop? When can it break the code?"
  },
  {
    "objectID": "03-Loops.html#types-of-loop-blocks",
    "href": "03-Loops.html#types-of-loop-blocks",
    "title": "3  Loops and Conditionals",
    "section": "3.2 Types of loop blocks",
    "text": "3.2 Types of loop blocks\nMostly here we’ve seen the repeat loop block, thats the most obvious sort but there are plenty of variations.\n\nuntil loop blocks do some code until something happens, that something can be specified by a e.g a sprite hits the side, or a number gets too big.\nwhile loop blocks do some code while some thing is still in some state,\nforever loop blocks do some code forever - this is more common than you think, especially in games for example. With these the main block of code just goes forever and stops only when something exceptional happens, like lives reaching 0.\n\n\n\n\n\n\n\nFor you to do\n\n\n\n\nIn your critique group or design journal discuss whether all these types of loop are actually interchangeable?\nIs there some sort of redundancy in all of these types of loop?\nWhat might be the reason for this?"
  },
  {
    "objectID": "03-Loops.html#conditionals",
    "href": "03-Loops.html#conditionals",
    "title": "3  Loops and Conditionals",
    "section": "3.3 Conditionals",
    "text": "3.3 Conditionals\nAlong the way we’ve already seen a different type of control block - a conditional. This is a block that contains code that will only be done if something specified by the programmer is true. You’ll notice this block because it begins with if and then there’s some thing that must be tested to see if its true, this is the actual condition to be tested.\nYou can see the place for the condition in this picture as a gap after the word if, that gap is waiting for the programmer to drop in any sort of thing to test.\n\n\n\n\n\n(Top) An IF block that only runs code if the condition slotted in the diamond shaped gap passes. (Bottom) An IF-ELSE block, in which the IF section works like the IF block and the ELSE section runs every time the IF section does not\n\n\n\n\nA conditional (or simply just an if block) is the easiest way to get a computer program make a decision and only do something in certain cases. They are abundant throughout computer programming.\nIn the upper form the code in the ‘mouth’ will only be run if the conditional test passes. If it doesn’t pass the test none of that code will be run. The rest of the program will carry on as if that code wasn’t even there.\nThe if-else form provides a way to be explicit about what to do if the condition doesn’t pass. If the condition for if doesn’t pass, then the code in the else block runs. Note that the two blocks are mutually exclusive, if one block runs, the other won’t."
  },
  {
    "objectID": "03-Loops.html#a-creative-project",
    "href": "03-Loops.html#a-creative-project",
    "title": "3  Loops and Conditionals",
    "section": "3.4 A creative project",
    "text": "3.4 A creative project\nIt’s time to put some of our skills and creativity to use and build something brand new. For this next section we will build something personalised and/or exciting. Choose one of the activities below and enjoy building something you like!\n\n\n\n\n\n\nFor you to do\n\n\n\n\nMake an interactive collage about yourself 1, using the About Me worksheet for a bit of guidance.\n\nor\n\nMake a music video. Use the Music Video worksheet"
  },
  {
    "objectID": "03-Loops.html#in-this-section-we",
    "href": "03-Loops.html#in-this-section-we",
    "title": "3  Loops and Conditionals",
    "section": "3.5 In this section we…",
    "text": "3.5 In this section we…\n\n\n\n\n\n\nFor you to do\n\n\n\nWe have encountered blocks and conditionals and use them to make stuff happen over and over, and only when we want it to. They save us from having to write out repetitive code.\nThese two types of blocks are at the heart of controlling the sequence of execution of code in a program. Practice with loops and conditionals will make you a powerful master of the things a computer does."
  },
  {
    "objectID": "04-Reuse.html",
    "href": "04-Reuse.html",
    "title": "4  Re-Use",
    "section": "",
    "text": "Wisdom\n\n\n\n\nWe are like dwarfs standing upon the shoulders of giants, and so able to see more and see farther than the ancients.\n\nBernard of Chartres, circa 1130\nReusing code is the cornerstone of productive programming. Reusing libraries and packages built by other people is very common. Reusing your own code - packing it up into little re-usable blocks is also very handy. Designing your programs such that you can re-use them will bring you great benefits. The code will be easier to build and understand, this means you’ll have less trouble building it, take less time and likely have fewer bugs.\nIn this section we’ll explore personal re-use of something you built by making our own Scratch blocks."
  },
  {
    "objectID": "04-Reuse.html#implementing-blocks",
    "href": "04-Reuse.html#implementing-blocks",
    "title": "4  Re-Use",
    "section": "4.1 Implementing blocks",
    "text": "4.1 Implementing blocks\nLet’s begin by making some blocks of our own.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nDo the Characters worksheet.\nMake sure you define two characters and two behaviours per character\n\ncan you make broadcasting work between your characters? 1\n\nDiscuss with a friend (or write in your design journal) about how Make a Block works. Come up with a description for a person new to blocks.\nWhen might you use Make a Block?\nI asserted that re-using blocks results in fewer code bugs. Discuss how that be justified?\n\n\n\nHopefully through these exercises you’ve seen that code re-use is a timesaver - once you’ve worked out how to actually implement the code in new block that is."
  },
  {
    "objectID": "04-Reuse.html#fixing-some-bugs",
    "href": "04-Reuse.html#fixing-some-bugs",
    "title": "4  Re-Use",
    "section": "4.2 Fixing some bugs",
    "text": "4.2 Fixing some bugs\nLet’s get a bit more practice and intuition about how blocks work by fixing some broken ones.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nDo the Blocks debugging worksheet\nDiscuss the following:\n\nHow big or small do blocks have to be?\nWould you ever want a huge block that did lots, or are smaller specific task blocks best?\n\nIs there an optimal level of re-use?"
  },
  {
    "objectID": "04-Reuse.html#abstraction",
    "href": "04-Reuse.html#abstraction",
    "title": "4  Re-Use",
    "section": "4.3 Abstraction",
    "text": "4.3 Abstraction\nA big plus to constructing blocks is that they are a tool for abstraction - they allow us to combine multiple small abilities into one larger, unifiying ability. This means that the amount of thinking we have to do about how our program works is less. In turn this means it is easier for us to progam."
  },
  {
    "objectID": "04-Reuse.html#a-major-insight---its-blocks-all-the-way-down",
    "href": "04-Reuse.html#a-major-insight---its-blocks-all-the-way-down",
    "title": "4  Re-Use",
    "section": "4.4 A major insight - its blocks all the way down",
    "text": "4.4 A major insight - its blocks all the way down\nIf the concept of blocks seems like it might be a bit generally applicable, you’re getting the key lesson of this section. All programming is either defining or re-using blocks of code. In this section with Scratch, its mostly been that our blocks have been a few commands that we want to re-use a couple of times. At different layers the blocks might be different levels of organisation of software. Some blocks with a few commands in each might be strung together into a bigger block called a script or program. A few scripts or programs might be strung together into a workflow, and there are levels under and above each of those. Beginning to think of programming at different levels of abstraction is a significant step in building your conceptual model of how programs and software in general works."
  },
  {
    "objectID": "04-Reuse.html#in-this-section-we",
    "href": "04-Reuse.html#in-this-section-we",
    "title": "4  Re-Use",
    "section": "4.5 In this section we …",
    "text": "4.5 In this section we …\n\n\n\n\n\n\nRoundup\n\n\n\nIn this section we built and used some custom blocks. We’ve seen how they can be reused, and remixed - a process called abstraction and modularisation. These practices vastly reduce work for the programmer and increase integrity of our programs."
  },
  {
    "objectID": "05-Variables.html",
    "href": "05-Variables.html",
    "title": "5  Variables",
    "section": "",
    "text": "Wisdom\n\n\n\n\nThere are only two hard things in Computer Science: cache invalidation and naming things.\n\nPhil Karlton\nPrograms will often need to keep track of different things that will change during the course of a program. In this final section we’ll make use of some simple variables and make a program that truly computes some stuff in response to inputs. We’ll spend most of our time coding and end up having produced a simple game."
  },
  {
    "objectID": "05-Variables.html#variables---names-for-changing-values",
    "href": "05-Variables.html#variables---names-for-changing-values",
    "title": "5  Variables",
    "section": "5.1 Variables - names for changing values",
    "text": "5.1 Variables - names for changing values\nConsider a program that counts some things - minimally it is going to need a tally that it can increase as it finds each new thing. We use code constructs called variables to keep track of changing things. Variables have two parts - a name and a value. So in our counter example, the number of things we’ve seen is the value, whatever we decide to call that in our program is our name.\n\n\n\n\n\n\n?\n\n\n\nHold on, isn’t that just algebra? When did this turn into maths? What sort of scam are you pulling here?\n\n\nYes, it is quite like algebra in one sense. But in another sense, the most important sense - the practical - it’s just names for stuff you don’t know the value of at the start. Another distinction is that variables don’t need to be just numbers. In other contexts you can keep track of text, pictures, sounds and even code itself. Don’t get hung up too much on variables being for numbers."
  },
  {
    "objectID": "05-Variables.html#building-a-game",
    "href": "05-Variables.html#building-a-game",
    "title": "5  Variables",
    "section": "5.2 Building a game",
    "text": "5.2 Building a game\nLet’s go crazy and jump straight into building a simple game that will allow us many opportunities for keeping track of internal data computed by your script in variables.\n\n\n\n\n\n\nFor you to do\n\n\n\n\nDo the Maze worksheet\nImplement some ‘collectable’ sprites 1 that increment a score variable by one when your player sprite touches them. Check out the ‘make a variable’ block to do this\nImplement some moving ‘baddie’ sprites 2 that decrement a life variable when your player sprite touches them. Add a “game over” process that stops the game when you run out of lives.\nConsider adding a high score table. Discuss with a friend how you might do this and write your proposal in your design journal 3?\n\n\n\n\n\n\n\n\n\nRoundup\n\n\n\nIn this section we looked at variables. We saw that these are names for data that our program uses and changes accordingly as the program progresses. We marshalled our programming skills to create a game."
  },
  {
    "objectID": "06-Conclusions.html",
    "href": "06-Conclusions.html",
    "title": "6  Final thought",
    "section": "",
    "text": "These concepts underpin every programming language. When you move on to build programs in other languages you’ll use all of them. The implementation of loops, conditionals, blocks and variables varies from language to language, but underneath they’re all the sames. For you, all that remains is the challenge of understanding the specific syntax of the new language.\nAs I wrote at the beginning the process of making a program is slow, so your first scripts in the new language may not be the most amazing. They’ll improve with practice. You don’t need to be a genius to program computers, you just need patience with yourself and a little determination to get there.\nGood Luck!"
  },
  {
    "objectID": "07-Acknowledgements.html",
    "href": "07-Acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "You can see their full and very exciting project at http://scratched.gse.harvard.edu/guide/.\nAspects of it are reused here, as intended and permitted under the Creative Commons 0 licence."
  }
]